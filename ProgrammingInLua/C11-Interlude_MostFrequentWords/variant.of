Constructs a new variant object.
1) Default constructor. Constructs a variant holding the value-initialized value of the first alternative (index() is zero).
This constructor is constexpr if and only if the value initialization of the alternative type T_0 would satisfy the requirements for a constexpr function.
This overload participates in overload resolution only if std::is_default_constructible_v<T_0> is true.
2) Copy constructor. If other is not valueless_by_exception, constructs a variant holding the same alternative as other and direct-initializes the contained value with std::get<other.index()>(other). Otherwise, initializes a valueless_by_exception variant.
This constructor is defined as deleted unless std::is_copy_constructible_v<T_i> is true for all T_i in Types....
It is trivial if std::is_trivially_copy_constructible_v<T_i> is true for all T_i in Types....
3) Move constructor. If other is not valueless_by_exception, constructs a variant holding the same alternative as other and direct-initializes the contained value with std::get<other.index()>(std::move(other)). Otherwise, initializes a valueless_by_exception variant.
This overload participates in overload resolution only if std::is_move_constructible_v<T_i> is true for all T_i in Types....
It is trivial if std::is_trivially_move_constructible_v<T_i> is true for all T_i in Types....
4) Converting constructor. Constructs a variant holding the alternative type T_j that would be selected by overload resolution for the expression F(std::forward<T>(t)) if there was an overload of imaginary function F(T_i) for every T_i from Types... in scope at the same time, except that:
An overload F(T_i) is only considered if the declaration T_i x[] = { std::forward<T>(t) }; is valid for some invented variable x.
 Direct-initializes the contained value as if by direct non-list-initialization from std::forward<T>(t).
This overload participates in overload resolution only if
sizeof...(Types) > 0,
std::decay_t<T> (until C++20)std::remove_cvref_t<T> (since C++20) is neither the same type as variant, nor a specialization of std::in_place_type_t, nor a specialization of std::in_place_index_t,
std::is_constructible_v<T_j, T> is true,
and the expression F(std::forward<T>(t)) (with F being the above-mentioned set of imaginary functions) is well formed.
This constructor is a constexpr constructor if T_j's selected constructor is a constexpr constructor.
